{"version":3,"sources":["components/Persons.js","components/Filter.js","components/PersonsForm.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["Person","person","onClick","name","number","Persons","persons","removePerson","map","key","Filter","filter","onChange","value","PersonsForm","props","onSubmit","addPerson","handleNameChange","handleNumberChange","type","Notification","message","messageType","className","baseUrl","newObject","axios","post","then","response","data","get","id","put","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","setMessage","errorMessage","setErrorMessage","resetForm","clearMessages","setTimeout","console","log","useEffect","personService","personsToShow","x","toLowerCase","includes","event","target","preventDefault","existingPersons","length","window","confirm","returnedPerson","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.234d9d5e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({ person, onClick }) => {\n    return (\n        <tr>\n            <td>{person.name}</td>\n            <td>{person.number}</td>\n            <td><button onClick={onClick(person)}>delete</button></td>\n        </tr>\n    )\n}\n\nconst Persons = ({ persons, removePerson }) => {\n    const personsMap = () =>\n        persons.map(person => <Person key={person.name} person={person} onClick={removePerson} />)\n    return (\n        <table>\n            <tbody>{personsMap()}</tbody>\n        </table>\n    )\n}\n\nexport default Persons\n","import React from 'react'\n\nconst Filter = ({ filter, onChange }) => {\n    return (\n        <div>\n            filter shown with <input value={filter} onChange={onChange} />\n        </div>\n    )\n}\n\nexport default Filter\n","import React from 'react'\n\nconst PersonsForm = props => {\n    return (\n        <form onSubmit={props.addPerson}>\n                <div>\n                    name: <input onChange={props.handleNameChange} value={props.name} />\n                </div>\n                <div>\n                    number:{' '}\n                    <input onChange={props.handleNumberChange} value={props.number} />\n                </div>\n                <div>\n                    <button type=\"submit\">add</button>\n                </div>\n            </form>\n    )\n}\n\nexport default PersonsForm","import React from 'react'\n\nconst Notification = ({ message, messageType }) => {\n    if (message === null) {\n        return null\n    }\n\n    return <div className={messageType}>{message}</div>\n}\n\nexport default Notification\n","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => axios.get(baseUrl).then(response => response.data)\n\nconst create = newObject =>\n    axios.post(baseUrl, newObject).then(response => response.data)\n\nconst remove = id =>\n    axios.delete(`${baseUrl}/${id}`).then(response => response.data)\n\nconst update = (id, newObject) =>\n    axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data)\n\nexport default {\n    create: create,\n    getAll: getAll,\n    update: update,\n    remove: remove,\n}\n","import React, { useState, useEffect } from 'react'\nimport Persons from './components/Persons'\nimport Filter from './components/Filter'\nimport PersonsForm from './components/PersonsForm'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [message, setMessage] = useState(null)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    const resetForm = () => {\n        setNewName('')\n        setNewNumber('')\n    }\n\n    const clearMessages = () => {\n        setTimeout(() => {\n            console.log('Clearing messages...')\n            setErrorMessage(null)\n            setMessage(null)\n        }, 5000)\n    }\n\n    useEffect(() => {\n        personService.getAll().then(persons => setPersons(persons))\n    }, [])\n\n    const addPerson = event => {\n        event.preventDefault()\n        const person = {\n            name: newName,\n            number: newNumber,\n        }\n\n        const existingPersons = persons.filter(x => x.name === newName)\n        if (existingPersons.length > 0) {\n            const result = window.confirm(\n                `${newName} is already added to phonebook, replace the old number with a new one?`\n            )\n            if (result) {\n                person.id = existingPersons[0].id\n                personService\n                    .update(person.id, person)\n                    .then(returnedPerson => {\n                        setPersons(\n                            persons.map(person =>\n                                person.id !== returnedPerson.id\n                                    ? person\n                                    : returnedPerson\n                            )\n                        )\n                        resetForm()\n                        setMessage(`Updated ${person.name}`)\n                        clearMessages()\n                    })\n                    .catch(error => {\n                        setErrorMessage(\n                            `Information of ${person.name} has already been removed from server`\n                        )\n                        clearMessages()\n                    })\n            }\n            return\n        }\n\n        personService.create(person).then(person => {\n            setPersons(persons.concat(person))\n            setMessage(`Added ${person.name}`)\n            clearMessages()\n            resetForm()\n        })\n    }\n\n    const handleNameChange = event => setNewName(event.target.value)\n    const handleNumberChange = event => setNewNumber(event.target.value)\n    const handleFilterChange = event => setFilter(event.target.value)\n\n    const removePerson = person => () => {\n        const result = window.confirm(`Delete ${person.name} ?`)\n        if (result) {\n            personService\n                .remove(person.id)\n                .then(() => {\n                    setPersons(persons.filter(x => x.id !== person.id))\n                    setMessage(`Deleted ${person.name}`)\n                    clearMessages()\n                })\n                .catch(error => {\n                    setErrorMessage(\n                        `Information of ${person.name} has already been removed from server`\n                    )\n                    clearMessages()\n                })\n        }\n    }\n\n    const personsToShow = filter\n        ? persons.filter(x =>\n              x.name.toLowerCase().includes(filter.toLowerCase())\n          )\n        : persons\n\n    return (\n        <div>\n            <Notification message={message} messageType=\"success\" />\n            <Notification message={errorMessage} messageType=\"error\" />\n            <h2>Phonebook</h2>\n            <Filter onChange={handleFilterChange} />\n            <h3>Add a new</h3>\n            <PersonsForm\n                handleNameChange={handleNameChange}\n                handleNumberChange={handleNumberChange}\n                name={newName}\n                number={newNumber}\n                addPerson={addPerson}\n            />\n            <h2>Numbers</h2>\n            <Persons persons={personsToShow} removePerson={removePerson} />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}